name: CI

on: [push,pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1.7.1']
        julia-arch: [x86] #[x64, x86]
        os: [ubuntu-latest, macOS-latest] #[ubuntu-latest, macOS-latest]
        # exclude:
        #   - os: macOS-latest
        #     julia-arch: x86

    steps:

      - run: echo "🎉 This job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup Julia env
        uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.julia-version }}
          # arch: ${{ matrix.julia-arch }}

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

    #  - uses: julia-actions/julia-buildpkg@latest

      - name: install dependencies
        run: julia --project=training_env -e 'using Pkg;Pkg.instantiate()'
        #uses: julia-actions/julia-buildpkg@v1

      # - uses: julia-actions/julia-runtest@latest

###############################################
#SIMULATIONS
##############################################

      - name: Running dummy simulation and putting into scripts/out file
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/simulation/main.jl -i ${{ github.workspace }}/tests/data/par_test.ini > ${{ github.workspace }}/scripts/out

      - name: Running dummy simulation with the flag for using time macro
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/simulation/main.jl -i ${{ github.workspace }}/tests/data/par_test0.ini --test 1

      - name: Running dummy simulation for creating and covering ini file
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/simulation/main.jl -i ${{ github.workspace }}/tests/data/par_test0.ini

      - name: Running dummy for single sim, with delay, and not simulating
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/simulation/main.jl --inject_delays -i ${{ github.workspace }}/tests/data/par_test2.ini

      - name: Running dummy MULTIPLE simulation
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/simulation/main.jl --multi_sim --inject_delays -i ${{ github.workspace }}/tests/data/par_test1.ini

      - name: Running dummy MULTIPLE simulation without injecting delays :/
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/simulation/main.jl --multi_sim -i ${{ github.workspace }}/tests/data/par_test1.ini


#############################################
#TESTS
#############################################

      - name: Running TEST over the simulation
        run: |
            julia --project=training_env --code-coverage=user ${{ github.workspace }}/tests/simulation_test.jl

      - name: send results to codecov.io, watching at simulation folder
        run: julia --project=training_env -e 'using Pkg; using Coverage; Codecov.submit(process_folder("simulation"))'

      # - name: julia-actions/julia-processcoverage@v1
      #   uses: julia-actions/julia-processcoverage@v1
      #   with:
      #     directories: simulation
      #
      # - name: codecov actions
      #   uses: codecov/codecov-action@v2
      #   with:
      #     file: lcov.info
      #     token: ${{ secrets.CODECOV_TOKEN }}
