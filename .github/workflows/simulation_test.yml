# name: GitHub Actions Demo
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v2
#
#       - name: setting up julia env with julia-actions
#         uses: julia-actions/setup-julia@v1
#         with:
#           # The Julia version that will be installed and added as `julia` to the PATH.
#           # See "Julia Versions" below for a list of valid values.
#           #
#           # Warning: It is strongly recommended to wrap this value in quotes.
#           #          Otherwise, the YAML parser used by GitHub Actions parses certain
#           #          versions as numbers which causes the wrong version to be selected.
#           #          For example, `1.0` may be parsed as `1`.
#           #
#           # Default: '1'
#           version: '1.6.4'
#
#           # The architecture of the Julia binaries.
#           #
#           # Supported values: x64 | x86
#           #
#           # Default: x64
#           arch: 'x64'
#
#           # Set the display setting for printing InteractiveUtils.versioninfo() after installing.
#           #
#           # Starting Julia and running InteractiveUtils.versioninfo() takes a significant amount of time (1s or ~10% of the total build time in testing),
#           # so you may not want to run it in every build, in particular on paid runners, as this cost will add up quickly.
#           #
#           # See "versioninfo" below for example usage and further explanations.
#           #
#           # Supported values: true | false | never
#           #
#           # true: Always print versioninfo
#           # false: Only print versioninfo for nightly Julia
#           # never: Never print versioninfo
#           #
#           # Default: false
#           show-versioninfo: 'false'
#
#
#       - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - name: Testing simulation
#         run: |
#           julia ./tests/simulation_test.jl
#       - run: echo "🍏 This job's status is ${{ job.status }}."

name: Simulation_test

on: [push,pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['1.7.1']
        julia-arch: [x86] #[x64, x86]
        os: [ubuntu-latest] #[ubuntu-latest, macOS-latest]
        # exclude:
        #   - os: macOS-latest
        #     julia-arch: x86

    steps:

      - run: echo "🎉 This job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup Julia env
        uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.julia-version }}
          # arch: ${{ matrix.julia-arch }}

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

    #  - uses: julia-actions/julia-buildpkg@latest

      - name: install dependencies
        run: julia --project=training_env -e 'using Pkg;Pkg.instantiate()'
        #uses: julia-actions/julia-buildpkg@v1

      # - uses: julia-actions/julia-runtest@latest


      - name: Running dummy simulation and putting into run/out file
        run: |
            julia --project=training_env --code-coverage=simulation/lcov.info --code-coverage=user ${{ github.workspace }}/simulation/main.jl -i ${{ github.workspace }}/tests/data/par_test.ini > ${{ github.workspace }}/run/out

#
      - name: read that out file
        run: |
            cat ${{ github.workspace }}/run/out

      - name: Testing simulation
        run: |
            julia --project=training_env ${{ github.workspace }}/tests/simulation_test.jl

      - name: send results to codecov.io, watching at simulation folder
        run: julia --project=training_env -e 'using Pkg; using Coverage; Codecov.submit(process_folder("simulation"))'

      # - name: julia-actions/julia-processcoverage@v1
      #   uses: julia-actions/julia-processcoverage@v1
      #   with:
      #     directories: simulation
      #
      # - name: codecov actions
      #   uses: codecov/codecov-action@v2
      #   with:
      #     file: lcov.info
      #     token: ${{ secrets.CODECOV_TOKEN }}
